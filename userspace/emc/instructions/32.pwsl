// One of the EMC instructions...
//
//    Copyright (C) 2021  adazem009
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
linkdef/"emc32","emc50","global"
{
	// Write file.
	// 32/[path]/[input list],[new permissions],[new owner],[new group]
	getitem/"argument1",1/"path2"
	getitem/"argument2",1/"il"
	getitem/"argument2",2/"perms"
	getitem/"argument2",3/"owner"
	getitem/"argument2",4/"group"
	// Convert file data
	getindex/"listn",il/"ix"
	getitem/"listc",ix/"ild"
	// Translate to absolute path
	source/$tmp_lib_fixpt/path2/"path2"
	// Check file availability
	bintolist/$mount_fs/"mount_fs"
	getindex/"mount_fs",path2/"ix"
	if/[ix != 0]
		// This file is mounted
		source/$tmp_lib_pidkmsg/255000000,"32: Unable to write file: Device or resource busy"
		exit
	endif
	// Get file name
	getitem/"parts","last"/"filename"
	// Get absolute path of the parent directory
	set/"path2",path2,"/.."
	source/$tmp_lib_fixpt/path2/"path2"
	source/$tmp_lib_fixpt/path2/"path2"
	if/[path2 == "/"]
		set/"pname","/"
	else
		getitem/"parts","last"/"pname"
	endif
	// List files
	if/[pseudo == ""]
		set/"fs",$rootfs/"tmppt",path2
	else
		readvar/pseudo/"fs"
		set/"tmppt",pseudo_path
	endif
	source/$tmp_lib_ls/tmppt,fs/"ftypes","fnames","fdata","fperms","fowns","fgroups","fattr"
	// Check, if the file exists
	getindex/"fnames",filename/"ix"
	if/[ix == 0]
		// Process perms, owner and group
		if/[perms == ""]
			// Default file permissions
			set/"perms","rw-rw-r--"
		endif
		if/[owner == ""]
			// Default owner
			set/"owner",whoami
		endif
		if/[group == ""]
			// Default group
			set/"group",whoami
		endif
		if/[pname == "/"]
			set/"perms","rw-r--r--"/"owner","root"/"group","root"
		else
			// Get parent directory path
			set/"path3",path2,"/.."
			source/$tmp_lib_fixpt/path3/"path3"
			// Check permissions
			if/[pseudo == ""]
				set/"fs",$rootfs/"tmppt",path3
			else
				readvar/pseudo/"fs"
				set/"tmppt",pseudo_path
			endif
			source/$tmp_lib_ls/tmppt,fs/"ftypes","fnames","fdata","fperms","fowns","fgroups","fattr"
			getindex/"fnames",pname/"ix"
			getitem/"fperms",ix/"perms"
			getitem/"fowns",ix/"owner"
			getitem/"fgroups",ix/"group"
		endif
		source/$tmp_lib_chperms/perms,owner,group/"permout"
		if/[permout == ""]
			// Abort creation when parent directory doesn't exist or has some odd permissions
			exit
		endif
		getletter/permout,1/"out1"
		getletter/permout,2/"out2"
		if/[out1 != "r"] or [out2 != "w"]
			source/$tmp_lib_pidkmsg/255000000,"32: Unable to create file: Permission denied"
			exit
		endif
		// Create the file
		// NOT SUPPORTED IN PSEUDO FILESYSTEMS!
		if/[pseudo == ""]
			source/$tmp_lib_ls/path2,$rootfs/"ftypes","fnames","fdata","fperms","fowns","fgroups","fattr"
			append/1/"ftypes"
			append/filename/"fnames"
			append/ild/"fdata"
			append/perms/"fperms"
			append/owner/"fowns"
			append/group/"fgroups"
		else
			source/$tmp_lib_pidkmsg/255000000,"32: Unable to create file: Permission denied"
			exit
		endif
	else
		// Process perms, owner and group
		if/[perms == ""]
			getitem/"fperms",ix/"perms"
		endif
		if/[owner == ""]
			getitem/"fowns",ix/"owner"
		endif
		if/[group == ""]
			getitem/"fgroups",ix/"group"
		endif
		// Check permissions
		if/[pseudo == ""]
			set/"fs",$rootfs/"tmppt",path2
		else
			readvar/pseudo/"fs"
			set/"tmppt",pseudo_path
		endif
		source/$tmp_lib_ls/tmppt,fs/"ftypes","fnames","fdata","fperms","fowns","fgroups","fattr"
		getindex/"fnames",filename/"ix"
		getitem/"fperms",ix/"perms"
		getitem/"fowns",ix/"owner"
		getitem/"fgroups",ix/"group"
		source/$tmp_lib_chperms/perms,owner,group/"permout"
		getletter/permout,2/"out"
		if/[out != "w"]
			source/$tmp_lib_pidkmsg/255000000,"32: Unable to write file: Permission denied"
			exit
		endif
		// Overwrite the file
		getitem/"ftypes",ix/"ft"
		if/[ft == 0]
			source/$tmp_lib_pidkmsg/255000000,"Unable to write file: Is a directory"
			exit
		endif
		if/[pseudo == ""]
			replace/ix,filename/"fnames"
			replace/ix,ild/"fdata"
			replace/ix,perms/"fperms"
			replace/ix,owner/"fowns"
			replace/ix,group/"fgroups"
		else
			// This is a pseudo file
			getitem/"fnames",ix/"tmp"
			if/[tmp != filename]
				source/$tmp_lib_pidkmsg/255000000,"Unable to write file: Permission denied"
				exit
			endif
			set/"file",ild
			replace/ix,perms/"fperms"
			replace/ix,owner/"fowns"
			replace/ix,group/"fgroups"
			getitem/"fdata",ix/"tmp"
			bintolist/tmp/"tmpd"
			getitem/"tmpd",1/"tmp"
			deleteitem/1/"tmpd"
			listtobin/"tmpd"/"tmp2"
			set/"tmp",tmp,"_write"
			readvar/tmp/"tmp"
			// Call write function
			source/tmp/0/tmp2
		endif
	endif
	// Write to parent directory
	if/[pseudo == ""]
		set/"fs",$rootfs/"tmppt",path2/"pseudo","$rootfs"
	else
		readvar/pseudo/"fs"
		set/"tmppt",pseudo_path
	endif
	source/$tmp_lib_wrdir/fs,"ftypes","fnames","fdata","fperms","fowns","fgroups","fattr"/path2,pseudo
}
