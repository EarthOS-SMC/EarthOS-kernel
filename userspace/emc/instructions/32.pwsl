// One of the EMC instructions...
//
//    Copyright (C) 2021  adazem009
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
linkdef/"emc32_ls","em32_ls","global"
{
	// emc32_ls/[pass required (1/0 - true/false)]
	getitem/"arg_1",1/"pass"
	// Check parent directory
	_ftest/path2,"r","d"/"ftest"
	// Get parent directory name
	getitem/"ftest",2/"pname"
	if/[return_code != ""] and [pass == 1]
		exit
	endif
	// List files in parent directory
	source/$tmp_lib_fixpt/path2/"path2"
	if/[pseudo == ""]
		set/"fs",$rootfs/"tmppt",path2
	else
		// Creating isn't supported in pseudo filesystems
		if/[pseudo != "mntfsbin"]
			set/"return_code","EIO"
			exit
		endif
		readvar/pseudo/"fs"
		set/"tmppt",pseudo_path
	endif
	source/$tmp_lib_ls/tmppt,fs/"ftypes","fnames","fdata","fperms","fowns","fgroups","fattr"
}
linkdef/"emc32","emc50","global"
{
	// Write file.
	// 32/[path]/[input list],[new permissions],[new owner],[new group]
	getitem/"argument1",1/"path2"
	getitem/"argument2",1/"il"
	getitem/"argument2",2/"nperms"
	getitem/"argument2",3/"nowner"
	getitem/"argument2",4/"ngroup"
	// Convert file data
	getindex/"listn",il/"ix"
	getitem/"listc",ix/"ild"
	// Use ftest to check the file
	_ftest/path2,"w","f"/"ftest"
	// Get file name
	getitem/"ftest",2/"filename"
	// Get parent directory path
	getitem/"ftest",3/"path2"
	if/[return_code != ""]
		if/[return_code == "ENOENT"]
			source/$tmp_lib_emc32_ls/1
			// Process perms, owner and group
			if/[nperms == ""]
				// Default file permissions
				set/"nperms","rw-rw-r--"
			endif
			if/[nowner == ""]
				// Default owner
				set/"nowner",whoami
			endif
			if/[ngroup == ""]
				// Default group
				set/"ngroup",whoami
			endif
			// Create the file
			append/1/"ftypes"
			append/filename/"fnames"
			append/ild/"fdata"
			append/nperms/"fperms"
			append/nowner/"fowns"
			append/ngroup/"fgroups"
		else
			exit
		endif
	else
		source/$tmp_lib_emc32_ls/0
		getindex/"fnames",filename/"ix"
		// Process perms, owner and group
		if/[nperms == ""]
			getitem/"fperms",ix/"nperms"
		endif
		if/[nowner == ""]
			getitem/"fowns",ix/"nowner"
		endif
		if/[ngroup == ""]
			getitem/"fgroups",ix/"ngroup"
		endif
		if/[pseudo == ""] or [pseudo == "mntfsbin"]
			replace/ix,filename/"fnames"
			replace/ix,ild/"fdata"
			replace/ix,nperms/"fperms"
			replace/ix,owner/"fowns"
			replace/ix,group/"fgroups"
		else
			// This is a pseudo file
			getitem/"fnames",ix/"tmp"
			if/[tmp != filename]
				// A pseudo file can't be renamed
				set/"return_code","EIO"
				exit
			endif
			set/"file",ild
			replace/ix,nperms/"fperms"
			replace/ix,nowner/"fowns"
			replace/ix,ngroup/"fgroups"
			getitem/"fdata",ix/"tmp"
			bintolist/tmp/"tmpd"
			getitem/"tmpd",1/"tmp"
			deleteitem/1/"tmpd"
			listtobin/"tmpd"/"tmp2"
			set/"tmp",tmp,"_write"
			readvar/tmp/"tmp"
			// Call write function
			source/tmp/0/tmp2
			exit
		endif
	endif
	// Write to parent directory
	source/$tmp_lib_fixpt/path2/"path2"
	if/[pseudo == ""]
		set/"fs",$rootfs/"tmppt",path2/"pseudo","$rootfs"
	else
		readvar/pseudo/"fs"
		set/"tmppt",pseudo_path
	endif
	source/$tmp_lib_wrdir/fs,"ftypes","fnames","fdata","fperms","fowns","fgroups","fattr"/tmppt,pseudo
	if/[pseudo == "mntfsbin"]
		bintolist/$mount_fsi/"mount_fsi"
		replace/mntid,mntfsbin/"mount_fsi"
		listtobin/"mount_fsi"/"$mount_fsi"
	endif
}
