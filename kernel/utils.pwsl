// EarthOS kernel - utilities
//
//    Copyright (C) 2021  adazem009
//
// Some utilities that don't fit in other categories.
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
linkdef/"resolvedev","rsd","global"
{
	warp
		// resolvedev/[path]
		getitem/"arg_1",1/"devp"
		set/"dvn","$",devp/"rdi",0/"dlt",""
		readvar/dvn/"dv"
		getletter/dv,1/"let"
		setlist/"dl"
		if/[let == "/"]
			append/dv/"dl"
			exit
		endif
		getlength/dv/"dvl"
		repeat/dvl
			calc/"rdi=rdi+1"
			getletter/dv,rdi/"rdl"
			if/[rdl == ","]
				append/dlt/"dl"
				set/"dlt",""
			else
				set/"dlt",dlt,rdl
			endif
		endloop
		append/dlt/"dl"
	endwarp
}
linkdef/"_fixpath_goup","fixpt_goup","global"
{
	warp
		// _fixpath_goup/[cur var name]
		getitem/"arg_1",1/"curv"
		readvar/curv/"ccur"
		getlength/ccur/"len2"
		setlist/"parts2"
		set/"part2",""/"i2",0
		repeat/len2
			calc/"i2=i2+1"
			getletter/ccur,i2/"let"
			if/[let == "/"] or [i2 == len2]
				if/[i2 > 1]
					if/[i2 == len2]
						set/"part2",part2,let
					endif
					append/part2/"parts2"
					set/"part2",""
				endif
			else
				set/"part2",part2,let
			endif
		endloop
		getlistlength/"parts2"/"len2"
		sub/len2,1/"len2"
		set/curv,""/"i2",0
		readvar/curv/"ccur"
		repeat/len2
			calc/"i2=i2+1"
			getitem/"parts2",i2/"it"
			readvar/curv/"ccur"
			set/curv,ccur,"/",it
		endloop
	endwarp
}
linkdef/"_fixpath","fixpt","global"
{
	warp
		// _fixpath/[path]/[output variable]
		getitem/"arg_1",1/"fxpath"
		getitem/"arg_2",1/"out"
		bintolist/$pseudo_fs/"pseudo_fs"
		bintolist/$pseudo_fs_name/"pseudo_fs_name"
		getlength/fxpath/"len"
		set/"cur",pwd/"cur2",pwd/"pseudo",""
		setlist/"parts"
		set/"i",0/"part",""
		while/[i < len]
			calc/"i=i+1"
			getletter/fxpath,i/"let"
			if/[let == "/"] or [i == len]
				if/[i == len] and [let != "/"]
					set/"part",part,let
				endif
				if/[i == 1]
					set/"part",""/"cur","/"/"cur2","/"
				endif
				append/part/"parts"
				if/[part == "."] or [part == ""]
					// Go to pwd
					// this needn't be defined
				else
					if/[part == ".."]
						// Go up
						if/[pseudo != ""]
							readvar/out/"tmp"
							if/[cur == "/"]
								set/"pseudo",""/"cur",tmp/"cur2",tmp
							endif
						endif
						if/[cur != "/"]
							source/$tmp_lib_fixpt_goup/"cur"
						endif
						if/[cur2 != "/"]
							source/$tmp_lib_fixpt_goup/"cur2"
						endif
						if/[cur == ""]
							set/"cur","/"
						endif
						if/[cur2 == ""]
							set/"cur2","/"
						endif
					else
						if/[cur == "/"]
							set/"cur","/",part
						else
							set/"cur",cur,"/",part
						endif
						if/[cur2 == "/"]
							set/"cur2","/",part
						else
							set/"cur2",cur2,"/",part
						endif
					endif
				endif
				set/"part",""
			else
				set/"part",part,let
			endif
			if/[pseudo == ""]
				getindex/"pseudo_fs",cur/"ix"
				if/[ix != 0]
					// A weird workaround for the path variable being overwritten
					setlist/"test"/cur
					getitem/"test",1/out
					//set/out,cur
					set/"cur","/"
					getitem/"pseudo_fs_name",ix/"pseudo"
				endif
			endif
		endloop
		set/out,cur2
		if/[pseudo != ""]
			set/"pseudo_path",cur
		endif
	endwarp
}
linkdef/"fileop","fop","global"
{
	// fileop/[path]
	getitem/"arg_1",1/"in"
	source/$tmp_lib_fixpt/in/"path"
	// The last item is our file name
	getlistlength/"parts"/"len"
	getitem/"parts",len/"gname"
	set/"path",in,"/.."
	// ^ This will make _fixpath ignore the last part of the path
	source/$tmp_lib_fixpt/path/"path"
	if/[pseudo == ""]
		set/"fs",$rootfs/"tmppt",path
	else
		readvar/pseudo/"fs"
		set/"tmppt",pseudo_path
	endif
	source/$tmp_lib_ls/tmppt,fs/"ftypes","fnames","fdata","fperms","fowns","fgroups","fattr"
	getindex/"fnames",gname/"ix"
}
linkdef/"_checkperms","chperms","global"
{
	// _checkperms/[permissions],[owner],[group]/[output variable]
	getitem/"arg_1",1/"perms"
	getitem/"arg_1",2/"owner"
	getitem/"arg_1",3/"group"
	getitem/"arg_2",1/"out"
	if/[perms == ""] or [owner == ""] or [group == ""]
		set/out,""
		exit
	endif
	set/out,""
	// Read group
	bintolist/$GROUPS/"GROUPS"
	bintolist/$GROUP_USERS/"GROUP_USERS"
	getindex/"GROUPS",group/"ix"
	if/[ix == 0]
		set/"msg","Unable to check permissions: Group '",group,"' not found"
		source/$tmp_lib_pidkmsg/255000000,msg
		exit
	endif
	getitem/"GROUP_USERS",ix/"curgrp"
	bintolist/curgrp/"grp"
	getindex/"grp",whoami/"ix"
	if/[ix == 0]
		set/"ingrp",0
	else
		set/"ingrp",1
	endif
	// Check perms
	if/[whoami == "root"]
		// rw
		set/"out2","rw"
	else
		if/[owner == whoami]
			// OWNER
			// r
			getletter/perms,1/"let"
			set/"out2",let
			// w
			getletter/perms,2/"let"
			set/"out2",out2,let
		else
			if/[ingrp == 1]
				// GROUP
				// r
				getletter/perms,4/"let"
				set/"out2",let
				// w
				getletter/perms,5/"let"
				set/"out2",out2,let
			else
				// OTHERS
				// r
				getletter/perms,7/"let"
				set/"out2",let
				// w
				getletter/perms,8/"let"
				set/"out2",out2,let
			endif
		endif
	endif
	if/[owner == whoami]
		// OWNER
		// x
		getletter/perms,3/"let"
		set/"out2",out2,let
	else
		if/[ingrp == 1]
			// GROUP
			// x
			getletter/perms,6/"let"
			set/"out2",out2,let
		else
			// OTHERS
			getletter/perms,9/"let"
			set/"out2",out2,let
		endif
	endif
	set/out,out2
}
